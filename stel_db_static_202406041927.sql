--
-- Script was generated by Devart dbForge Studio for MySQL, Version 10.0.150.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 4/6/2024 19:27:57
-- Server version: 8.3.0
--

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

--
-- Set SQL mode
--
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

--
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8mb4';

DROP DATABASE IF EXISTS stel_db_static;

CREATE DATABASE IF NOT EXISTS stel_db_static
CHARACTER SET utf8mb4
COLLATE utf8mb4_0900_ai_ci;

--
-- Set default database
--
USE stel_db_static;

--
-- Create table `material`
--
CREATE TABLE IF NOT EXISTS material (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  description varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 13,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Material of Hoop',
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Create function `existMaterial`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existMaterial (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM material m
  WHERE m.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `updateMaterial`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS updateMaterial (IN id int UNSIGNED, IN nameIN varchar(20), IN descriptionIN varchar(80))
DETERMINISTIC
BEGIN

  DECLARE result text;

  IF (existMaterial(id) = TRUE) THEN
    UPDATE LOW_PRIORITY material m
    SET m.id = id,
        m.name = nameIN,
        m.description = descriptionIN
    WHERE m.id = id;

    SELECT
      'Successful Updated!' INTO result;
  ELSE
    SELECT
      'Unsucessful Updated!' INTO result;
  END IF;

  SELECT
    result AS `response`;

END
$$

--
-- Create procedure `deleteMaterial`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS deleteMaterial (IN id int UNSIGNED)
DETERMINISTIC
BEGIN

  IF (existMaterial(id) = TRUE) THEN
    DELETE LOW_PRIORITY QUICK
      FROM material m
    WHERE m.id = id
    LIMIT 1;

    SELECT
      'Successful Deleted!' AS `response`;
  ELSE
    SELECT
      'Unsuccessful Deleted!' AS `response`;
  END IF;

END
$$

--
-- Create procedure `insertMaterial`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS insertMaterial (IN nameIN varchar(20), IN descriptionIN varchar(60))
DETERMINISTIC
BEGIN

  DECLARE selected bigint;
  DECLARE result json;

  SELECT
    COUNT(*) INTO selected
  FROM material m
  WHERE m.name LIKE nameIN;

  IF (selected = 0) THEN
    INSERT INTO material (name, description)
      VALUES (nameIN, descriptionIN);

    SELECT
      m.id AS `key`,
      m.name AS `material`,
      m.description AS `description`,
      '[]' AS `specifications`
    FROM material m
    WHERE m.name = nameIN;

  ELSE
    SELECT
      'Already Exists!' AS `response`;
  END IF;

END
$$

DELIMITER ;

--
-- Create table `specification`
--
CREATE TABLE IF NOT EXISTS specification (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  material int UNSIGNED NOT NULL,
  name varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  description varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT 'Sin Descripción',
  createdAt datetime NOT NULL,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Specification of material',
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE specification
ADD CONSTRAINT FK_specification_material_id FOREIGN KEY (material)
REFERENCES material (id) ON UPDATE CASCADE;

DELIMITER $$

--
-- Create function `existSpecimen`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existSpecimen (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM specification s
  WHERE s.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create function `existSpecification`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existSpecification (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected int;
  SELECT
    COUNT(*) INTO selected
  FROM specification s
  WHERE s.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `updateSpecification`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS updateSpecification (IN id int UNSIGNED, IN nameIN varchar(20), IN descriptionIN varchar(80))
DETERMINISTIC
BEGIN

  DECLARE result text;

  IF (existSpecification(id) = TRUE) THEN
    UPDATE LOW_PRIORITY specification s
    SET s.id = id,
        s.name = nameIN,
        s.description = descriptionIN
    WHERE s.id = id;

    SELECT
      'Successful Updated!' INTO result;
  ELSE
    SELECT
      'Unsuccessful Updated!' INTO result;
  END IF;

  SELECT
    result AS `response`;
END
$$

--
-- Create procedure `deleteSpecification`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS deleteSpecification (IN id int UNSIGNED)
DETERMINISTIC
BEGIN

  IF (existSpecification(id) = TRUE) THEN
    DELETE LOW_PRIORITY QUICK
      FROM specification s
    WHERE s.id = id
    LIMIT 1;

    SELECT
      'Successful Deleted!' AS `response`;
  ELSE
    SELECT
      'Unsuccessful Deleted!' AS `response`;
  END IF;

END
$$

--
-- Create function `existConfiguration`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existConfiguration (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM specification s
  WHERE s.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `selectSpecifications`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectSpecifications (IN idMaterial int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    s.id AS idSpecification,
    s.name AS nameSpecification,
    s.description AS descriptionSpecification
  FROM specification s
  WHERE s.material = idMaterial;

END
$$

--
-- Create procedure `insertSpecification`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS insertSpecification (IN materialIN int UNSIGNED, IN nameIN varchar(20), IN descriptionIN varchar(60))
DETERMINISTIC
BEGIN

  DECLARE selected bigint;

  SELECT
    COUNT(*) INTO selected
  FROM specification s
  WHERE s.name = nameIN
  AND s.material = materialIN;

  IF (selected = 0) THEN
    INSERT INTO specification (material, name, description)
      VALUES (materialIN, nameIN, descriptionIN);

    SELECT
      s.id AS `key`,
      s.name AS `specification`,
      s.description AS `description`,
      '[]' AS `configurations`
    FROM specification s
    WHERE s.name LIKE nameIN;

  ELSE
    SELECT
      'Already Exists!' AS `response`;
  END IF;

END
$$

DELIMITER ;

--
-- Create table `specification_configuration`
--
CREATE TABLE IF NOT EXISTS specification_configuration (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  specification int UNSIGNED NOT NULL,
  time smallint UNSIGNED NOT NULL,
  timeType varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT 'H',
  temperature tinyint UNSIGNED NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 12,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Conditional period by Specification',
ROW_FORMAT = DYNAMIC;

--
-- Create index `FK_period_by_material_material_id` on table `specification_configuration`
--
ALTER TABLE specification_configuration
ADD INDEX FK_period_by_material_material_id (specification);

--
-- Create foreign key
--
ALTER TABLE specification_configuration
ADD CONSTRAINT FK_specification_configuration_specification_id FOREIGN KEY (specification)
REFERENCES specification (id) ON UPDATE CASCADE;

DELIMITER $$

--
-- Create function `selectSpecification_Configurations`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectSpecification_Configurations (idSpecification int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  DECLARE result json;
  DECLARE elements tinyint;

  SELECT
    COUNT(*) INTO elements
  FROM specification_configuration sc
  WHERE sc.specification = idSpecification;

  IF (elements > 0) THEN
    SELECT
      JSON_ARRAYAGG(JSON_OBJECT('key', sc.id,
      'time', sc.time,
      'type', sc.timeType,
      'temperature', sc.temperature)) INTO result
    FROM specification_configuration sc
    WHERE sc.specification = idSpecification;
  ELSE
    SELECT
      '[]' INTO result;
  END IF;

  RETURN result;
END
$$

--
-- Create function `selectSpecifications`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectSpecifications (idMaterial int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  DECLARE result json;
  DECLARE elements tinyint;

  SELECT
    COUNT(*) INTO elements
  FROM specification s
  WHERE s.material = idMaterial;

  IF (elements > 0) THEN
    SELECT
      JSON_ARRAYAGG(JSON_OBJECT('key', s.id,
      'specification', s.name,
      'description', (IF(s.description IS NULL, '', s.description)),
      'configurations', (selectSpecification_Configurations(s.id)))) INTO result
    FROM specification s
    WHERE s.material = idMaterial;
  ELSE
    SELECT
      '[]' INTO result;
  END IF;

  RETURN result;
END
$$

--
-- Create procedure `selectMaterialsJSON`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectMaterialsJSON ()
DETERMINISTIC
BEGIN

  SELECT
    JSON_ARRAYAGG(JSON_OBJECT('key', m.id,
    'material', m.name,
    'description', (IF(m.description IS NULL, 'Sin Descripción', m.description)),
    'specifications', (selectSpecifications(m.id)))) AS `materials`
  FROM material m;

END
$$

--
-- Create function `existSpecification_Configuration`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existSpecification_Configuration (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM specification_configuration sc
  WHERE sc.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `updateSpecification_Configuration`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS updateSpecification_Configuration (IN id int UNSIGNED, IN timeIN smallint, IN timeTypeIN varchar(1), IN temperatureIN tinyint)
DETERMINISTIC
BEGIN

  DECLARE result text;

  IF (existSpecification_Configuration(id) = TRUE) THEN
    UPDATE LOW_PRIORITY specification_configuration sc
    SET sc.id = id,
        sc.time = timeIN,
        sc.timeType = timeTypeIN,
        sc.temperature = temperatureIN
    WHERE sc.id = id;

    SELECT
      'Successful Updated!' INTO result;
  ELSE
    SELECT
      'Unsuccessful Updated!' INTO result;
  END IF;

  SELECT
    result AS response;
END
$$

--
-- Create procedure `deleteSpecification_Configuration`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS deleteSpecification_Configuration (IN id int UNSIGNED)
DETERMINISTIC
BEGIN

  IF (existSpecification_Configuration(id) = TRUE) THEN
    DELETE LOW_PRIORITY QUICK
      FROM specification_configuration sc
    WHERE sc.id = id
    LIMIT 1;

    SELECT
      'Successful Deleted!' AS `response`;
  ELSE
    SELECT
      'Unsuccessful Deleted!' AS `response`;
  END IF;

END
$$

--
-- Create procedure `selectSettingsSpecification`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectSettingsSpecification (IN idSpecification int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    sc.id AS idSetting,
    sc.time AS time,
    sc.temperature AS temperature
  FROM specification_configuration sc
  WHERE sc.specification = idSpecification;

END
$$

--
-- Create procedure `insertSpecification_Configuration`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS insertSpecification_Configuration (IN specificationIN int UNSIGNED, IN timeIN smallint, IN timeTypeIN varchar(1), IN temperatureIN tinyint)
DETERMINISTIC
BEGIN

  DECLARE selected bigint;

  SELECT
    COUNT(*) INTO selected
  FROM specification_configuration sc
  WHERE sc.specification = specificationIN
  AND sc.time = timeIN
  AND sc.temperature = temperatureIN;

  IF (selected = 0) THEN
    INSERT INTO specification_configuration (specification, time, timeType, temperature)
      VALUES (specificationIN, timeIN, timeTypeIN, temperatureIN);

    SELECT
      sc.id AS `key`,
      sc.time AS `time`,
      sc.timeType AS `timeType`,
      sc.temperature AS `temperature`
    FROM specification_configuration sc
    WHERE sc.specification = specificationIN
    AND sc.time = timeIN
    AND sc.temperature = temperatureIN;

  ELSE
    SELECT
      'Already Exists!' AS `response`;
  END IF;

END
$$

DELIMITER ;

--
-- Create table `standard`
--
CREATE TABLE IF NOT EXISTS standard (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  name varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Standards: ISO, IRAM, ...',
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Create function `existStandard`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existStandard (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM standard s
  WHERE s.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `selectStandards`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectStandards ()
DETERMINISTIC
BEGIN

  SELECT
    s.id AS idStandard,
    s.name AS standardName
  FROM standard s;

END
$$

--
-- Create procedure `insertStandard`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS insertStandard (IN nameIn varchar(40))
DETERMINISTIC
BEGIN

  DECLARE elements int UNSIGNED;

  SELECT
    COUNT(*)
  FROM standard s
  WHERE s.name LIKE nameIn;

  IF elements = 0 THEN
    INSERT HIGH_PRIORITY INTO standard (name)
      VALUES (nameIn);

    SELECT
      s.id AS `key`,
      s.name AS `standard`,
      '[]' AS `materials`,
      '[]' AS `enviroments`,
      '[]' AS `endCaps`,
      '[]' AS conditionalPeriods
    FROM standard s
    WHERE s.name LIKE nameIn;

  ELSE
    SELECT
      'Already Exist!' AS `response`;
  END IF;

END
$$

DELIMITER ;

--
-- Create table `test_type`
--
CREATE TABLE IF NOT EXISTS test_type (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  standard int UNSIGNED NOT NULL,
  testType varchar(150) NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 2,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE test_type
ADD CONSTRAINT FK_test_type_standard_id FOREIGN KEY (standard)
REFERENCES standard (id) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create function `selectTest_Type`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectTest_Type (idStandard int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  DECLARE result json;

  SELECT
    JSON_ARRAYAGG(JSON_OBJECT('key', tt.id,
    'testType', tt.testType)) INTO result
  FROM test_type tt
  WHERE tt.id = idStandard;

  RETURN result;
END
$$

--
-- Create function `existTest_Type`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existTest_Type (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM test_type tt
  WHERE tt.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `selectTestType`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectTestType (IN idStandard int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    tt.id,
    tt.testType
  FROM test_type tt
  WHERE tt.standard = idStandard;

END
$$

DELIMITER ;

--
-- Create table `material_has_standard`
--
CREATE TABLE IF NOT EXISTS material_has_standard (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  idMaterial int UNSIGNED NOT NULL,
  idStandard int UNSIGNED NOT NULL,
  type varchar(25) NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE material_has_standard
ADD CONSTRAINT FK_material_has_standard_material_id FOREIGN KEY (idMaterial)
REFERENCES material (id) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE material_has_standard
ADD CONSTRAINT FK_material_has_standard_standard_id FOREIGN KEY (idStandard)
REFERENCES standard (id) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create function `selectMaterials_has_Standard`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectMaterials_has_Standard (idStandard int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  DECLARE result json;
  DECLARE elements tinyint;

  SELECT
    COUNT(*) INTO elements
  FROM material_has_standard mhs
  WHERE mhs.idStandard = idStandard;

  IF (elements > 0) THEN
    SELECT
      JSON_ARRAYAGG(JSON_OBJECT('key', mhs.id,
      'idMaterial', mhs.idMaterial,
      'material', m.name,
      'descriptioin', m.description)) INTO result
    FROM material_has_standard mhs
      INNER JOIN material m
    WHERE mhs.idStandard = idStandard;
  ELSE
    SELECT
      '[]' INTO result;
  END IF;

  RETURN result;
END
$$

--
-- Create function `existMaterial_has_standard`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existMaterial_has_standard (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM material_has_standard mhs
  WHERE mhs.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `selectMaterials`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectMaterials (IN idStandard int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    mhs.idMaterial AS idMaterial,
    m.name AS materialName,
    m.description AS materialDescription,
    mhs.type AS materialType
  FROM material m
    INNER JOIN material_has_standard mhs
      ON m.id = mhs.idMaterial
  WHERE mhs.idStandard = idStandard;

END
$$

--
-- Create procedure `insertRelatedMaterial`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS insertRelatedMaterial (IN idStandard int UNSIGNED, IN idMaterial int UNSIGNED)
BEGIN

  DECLARE elements int UNSIGNED;

  SELECT
    COUNT(*)
  FROM material_has_standard mhs
  WHERE mhs.idMaterial = idMaterial
  AND mhs.idStandard = idStandard;

  IF elements = 0 THEN
    INSERT HIGH_PRIORITY INTO material_has_standard (idMaterial, idStandard)
      VALUES (idMaterial, idStandard);

    SELECT
      mhs.id AS `key`,
      m.id AS `idMaterial`,
      m.name AS `material`
    FROM material_has_standard mhs
      INNER JOIN material m
        ON mhs.idMaterial = m.id
    WHERE mhs.idMaterial = idMaterial
    AND mhs.idStandard = idStandard;

  ELSE
    SELECT
      'Already Exist!' AS `response`;
  END IF;

END
$$

DELIMITER ;

--
-- Create table `enviroment`
--
CREATE TABLE IF NOT EXISTS enviroment (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  standard int UNSIGNED NOT NULL,
  insertFluid varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  outFluid varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 4096,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci,
COMMENT = 'Enviroments',
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE enviroment
ADD CONSTRAINT FK_enviroment_standard_id FOREIGN KEY (standard)
REFERENCES standard (id) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create function `selectEnviroments_has_Standard`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectEnviroments_has_Standard (idStandard int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  DECLARE result json;
  DECLARE elements tinyint(1);

  SELECT
    COUNT(*) INTO elements
  FROM enviroment e
  WHERE e.standard = idStandard;

  IF (elements > 0) THEN
    SELECT
      JSON_ARRAYAGG(JSON_OBJECT('key', e.id,
      'insertFluid', e.insertFluid,
      'outsideFluid', e.outFluid)) INTO result
    FROM enviroment e
    WHERE e.standard = idStandard;
  ELSE
    SELECT
      '[]' INTO result;
  END IF;

  RETURN result;
END
$$

--
-- Create function `existEnviroment`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existEnviroment (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM enviroment e
  WHERE e.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `selectEnviroment`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectEnviroment (IN idStandard int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    ehs.id,
    ehs.insertFluid,
    ehs.outFluid
  FROM enviroment ehs
  WHERE ehs.standard = idStandard;

END
$$

DELIMITER ;

--
-- Create table `endcap`
--
CREATE TABLE IF NOT EXISTS endcap (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  standard int UNSIGNED NOT NULL,
  encap varchar(10) NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci,
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE endcap
ADD CONSTRAINT FK_endcap_standard_id FOREIGN KEY (standard)
REFERENCES standard (id) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create function `selectEndCaps_has_Standard`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectEndCaps_has_Standard (idStandard int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  DECLARE result json;
  DECLARE elements tinyint(1);

  SELECT
    COUNT(*) INTO elements
  FROM endcap ec
  WHERE ec.standard = idStandard;

  IF (elements > 0) THEN
    SELECT
      JSON_ARRAYAGG(JSON_OBJECT('key', ec.id,
      'endcap', ec.encap)) INTO result
    FROM endcap ec
    WHERE ec.standard = idStandard;
  ELSE
    SELECT
      '[]' INTO result;
  END IF;

  RETURN result;
END
$$

--
-- Create function `existEndCap`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existEndCap (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM endcap e
  WHERE e.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `selectEndCaps`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectEndCaps (IN idStandard int UNSIGNED)
BEGIN

  SELECT
    e.id AS `id`,
    e.encap AS `endCap`
  FROM endcap e
  WHERE e.standard = idStandard;

END
$$

DELIMITER ;

--
-- Create table `conditional_period`
--
CREATE TABLE IF NOT EXISTS conditional_period (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  standard int UNSIGNED NOT NULL,
  time varchar(20) NOT NULL,
  minwall int UNSIGNED NOT NULL,
  maxwall int UNSIGNED NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedtAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_unicode_ci,
COMMENT = 'Conditional Period related to Standard',
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE conditional_period
ADD CONSTRAINT FK_conditional_period_standard_id FOREIGN KEY (standard)
REFERENCES standard (id);

DELIMITER $$

--
-- Create function `selectConditionalPeriods_has_Standard`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectConditionalPeriods_has_Standard (idStandard int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  DECLARE result json;
  DECLARE elements tinyint(1);

  SELECT
    COUNT(*) INTO elements
  FROM conditional_period cp
  WHERE cp.standard = idStandard;

  IF (elements > 0) THEN
    SELECT
      JSON_ARRAYAGG(JSON_OBJECT('key', cp.id,
      'time', cp.time,
      'minwall', cp.minwall,
      'maxwall', cp.maxwall)) INTO result
    FROM conditional_period cp
    WHERE cp.standard = idStandard;
  ELSE
    SELECT
      '[]' INTO result;
  END IF;

  RETURN result;
END
$$

--
-- Create procedure `selectStandardsJSON`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectStandardsJSON ()
DETERMINISTIC
BEGIN

  SELECT
    JSON_ARRAYAGG(JSON_OBJECT('key', s.id,
    'standard', s.name,
    'materials', (selectMaterials_has_Standard(s.id)),
    'enviroments', (selectEnviroments_has_Standard(s.id)),
    'endCaps', (selectEndCaps_has_Standard(s.id)),
    'conditionalPeriods', (selectConditionalPeriods_has_Standard(s.id)))) AS `standards`
  FROM standard s;

END
$$

--
-- Create function `existConditionalPeriod`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existConditionalPeriod (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM conditional_period cp
  WHERE cp.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `selectStandarsComplete`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectStandarsComplete ()
DETERMINISTIC
BEGIN

  SELECT
    s.id,
    s.name,
    (SELECT
        JSON_ARRAYAGG(JSON_OBJECT('id', e.id,
        'endcap', e.encap))
      FROM endcap e
      WHERE e.standard = s.id) AS `endCaps`,
    (SELECT
        JSON_ARRAYAGG(JSON_OBJECT('id', e.id,
        'insertFluid', e.insertFluid,
        'outsideFluid', e.outFluid))
      FROM enviroment e
      WHERE e.standard = s.id) AS `enviroment`,
    (SELECT
        JSON_ARRAYAGG(JSON_OBJECT('id', cp.id,
        'minwall', cp.minwall,
        'maxwall', cp.maxwall,
        'time', cp.time))
      FROM conditional_period cp
      WHERE cp.standard = s.id) AS conditionalPeriod,
    (SELECT
        JSON_ARRAYAGG(JSON_OBJECT('id', mhs.id,
        'idMaterial', mhs.idMaterial,
        'material', m.name,
        'description', m.description))
      FROM material_has_standard mhs
        INNER JOIN material m
          ON mhs.idMaterial = m.id
      WHERE mhs.idStandard = s.id) AS relatedMaterial
  FROM standard s;

END
$$

--
-- Create procedure `selectConditionalPeriods`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectConditionalPeriods (IN idStandard int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    cp.id AS idCondPeriod,
    cp.minwall AS minWall,
    cp.maxwall AS maxWall,
    cp.time AS condPeriod
  FROM conditional_period cp
  WHERE cp.standard = idStandard
  ORDER BY cp.minwall;

END
$$

DELIMITER ;

--
-- Create table `operator`
--
CREATE TABLE IF NOT EXISTS operator (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  dni int UNSIGNED NOT NULL,
  name varchar(50) NOT NULL,
  familyname varchar(50) NOT NULL,
  createdAt datetime(4) NOT NULL DEFAULT CURRENT_TIMESTAMP(4),
  updatedAt datetime(4) NOT NULL DEFAULT CURRENT_TIMESTAMP(4) ON UPDATE CURRENT_TIMESTAMP(4),
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 14,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci,
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Create function `existOperator`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS existOperator (id int UNSIGNED)
RETURNS tinyint(1)
DETERMINISTIC
BEGIN

  DECLARE selected bigint(255);
  SELECT
    COUNT(*) INTO selected
  FROM operator o
  WHERE o.id = id;

  IF selected != 1 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;

END
$$

--
-- Create procedure `updateOperator`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS updateOperator (IN id int UNSIGNED, IN dni int UNSIGNED, IN name varchar(50), IN familyname varchar(50))
DETERMINISTIC
BEGIN

  DECLARE result text;

  IF (existOperator(id) = TRUE) THEN
    UPDATE LOW_PRIORITY operator o
    SET o.dni = dni,
        o.name = name,
        o.familyname = familyname
    WHERE o.id = id;

    SELECT
      'Successful Updated!' INTO result;
  ELSE
    SELECT
      'Unsuccessful Updated!' INTO result;
  END IF;

  SELECT
    result AS response;

END
$$

--
-- Create procedure `deleteOperator`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS deleteOperator (IN id int UNSIGNED)
DETERMINISTIC
BEGIN

  IF (existOperator(id) = TRUE) THEN
    DELETE LOW_PRIORITY QUICK
      FROM operator o
    WHERE o.id = id
    LIMIT 1;

    SELECT
      'Successful Deleted!' AS `response`;
  ELSE
    SELECT
      'Unsuccessful Deleted!' AS `response`;
  END IF;

END
$$

--
-- Create procedure `selectOperatorsJSON`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectOperatorsJSON ()
DETERMINISTIC
BEGIN

  SELECT
    JSON_ARRAYAGG(JSON_OBJECT('key', o.id,
    'dni', o.dni,
    'name', o.name,
    'familyName', o.familyname)) AS `operators`
  FROM operator o;

END
$$

--
-- Create procedure `selectOperators`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectOperators ()
DETERMINISTIC
BEGIN

  SELECT
    o.id,
    o.dni,
    o.name,
    o.familyname
  FROM operator o;

END
$$

--
-- Create procedure `insertOperator`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS insertOperator (IN dni int UNSIGNED, IN name varchar(20), IN familyname varchar(30))
DETERMINISTIC
BEGIN

  DECLARE selected bigint;

  SELECT
    COUNT(*) INTO selected
  FROM operator o
  WHERE o.dni = dni;

  IF (selected = 0) THEN
    INSERT INTO operator (dni, name, familyname)
      VALUES (dni, name, familyname);

    SELECT
      o.id AS `key`,
      o.dni AS `dni`,
      o.name AS `name`,
      o.familyname AS `familyName`
    FROM operator o
    WHERE o.dni = dni;

  ELSE
    SELECT
      'Already Exists!' AS `response`;
  END IF;

END
$$

DELIMITER ;

CREATE USER IF NOT EXISTS 'dataCollector'@'%' IDENTIFIED WITH mysql_native_password PASSWORD EXPIRE DEFAULT;
GRANT EXECUTE ON PROCEDURE stel_db_data.countspecimens TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.insertdata TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.insertsample TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.insertspecimen TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selectsample TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selectsampleid TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selectspecimen TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectconditionalperiods TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectendcaps TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectenviroment TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectmaterials TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectoperators TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectsettingsspecification TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectspecifications TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectstandards TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selecttesttype TO 'dataCollector'@'%';

CREATE USER IF NOT EXISTS 'databaseManager'@'%' IDENTIFIED WITH mysql_native_password PASSWORD EXPIRE NEVER;
GRANT EXECUTE ON PROCEDURE stel_db_static.deletematerial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.deleteoperator TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.deletespecification TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.deletespecification_configuration TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertmaterial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertoperator TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertspecification TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertspecification_configuration TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectconditionalperiods TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectendcaps TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectenviroment TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectmaterials TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectmaterialsjson TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectoperators TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectoperatorsjson TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectsettingsspecification TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectspecifications TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectstandards TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectstandardsjson TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectstandarscomplete TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selecttesttype TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updatematerial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updateoperator TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updatespecification TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updatespecification_configuration TO 'databaseManager'@'%';

CREATE USER IF NOT EXISTS 'mysql.infoschema'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;
GRANT SELECT, AUDIT_ABORT_EXEMPT, FIREWALL_EXEMPT, SYSTEM_USER ON *.* TO 'mysql.infoschema'@'localhost';

CREATE USER IF NOT EXISTS 'mysql.session'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;
GRANT SHUTDOWN, SUPER, CLONE_ADMIN, CONNECTION_ADMIN, AUDIT_ABORT_EXEMPT, AUTHENTICATION_POLICY_ADMIN, BACKUP_ADMIN, FIREWALL_EXEMPT, PERSIST_RO_VARIABLES_ADMIN, SESSION_VARIABLES_ADMIN, SYSTEM_USER, SYSTEM_VARIABLES_ADMIN ON *.* TO 'mysql.session'@'localhost';
GRANT SELECT ON performance_schema.* TO 'mysql.session'@'localhost';
GRANT SELECT ON TABLE mysql.user TO 'mysql.session'@'localhost';

CREATE USER IF NOT EXISTS 'mysql.sys'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;
GRANT AUDIT_ABORT_EXEMPT, FIREWALL_EXEMPT, SYSTEM_USER ON *.* TO 'mysql.sys'@'localhost';
GRANT TRIGGER ON sys.* TO 'mysql.sys'@'localhost';
GRANT SELECT ON TABLE sys.sys_config TO 'mysql.sys'@'localhost';

CREATE USER IF NOT EXISTS 'reportGenerator'@'%' IDENTIFIED WITH mysql_native_password PASSWORD EXPIRE NEVER;
GRANT EXECUTE ON *.* TO 'reportGenerator'@'%';

CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT;
GRANT USAGE ON *.* TO 'root'@'%'
WITH GRANT OPTION;
GRANT ALTER, ALTER ROUTINE, CREATE, CREATE ROLE, CREATE ROUTINE, CREATE TABLESPACE, CREATE TEMPORARY TABLES, CREATE USER, CREATE VIEW, DELETE, DROP, DROP ROLE, EVENT, EXECUTE, FILE, INDEX, INSERT, LOCK TABLES, PROCESS, REFERENCES, RELOAD, REPLICATION CLIENT, REPLICATION SLAVE, SELECT, SHOW DATABASES, SHOW VIEW, SHUTDOWN, SUPER, TRIGGER, UPDATE, BINLOG_ENCRYPTION_ADMIN, CLONE_ADMIN, CONNECTION_ADMIN, ENCRYPTION_KEY_ADMIN, FIREWALL_EXEMPT, FLUSH_OPTIMIZER_COSTS, FLUSH_STATUS, FLUSH_TABLES, FLUSH_USER_RESOURCES, GROUP_REPLICATION_ADMIN, GROUP_REPLICATION_STREAM, INNODB_REDO_LOG_ARCHIVE, INNODB_REDO_LOG_ENABLE, PASSWORDLESS_USER_ADMIN, PERSIST_RO_VARIABLES_ADMIN, REPLICATION_APPLIER, REPLICATION_SLAVE_ADMIN, RESOURCE_GROUP_ADMIN, RESOURCE_GROUP_USER, ROLE_ADMIN, SENSITIVE_VARIABLES_OBSERVER, SERVICE_CONNECTION_ADMIN, SESSION_VARIABLES_ADMIN, SET_ANY_DEFINER, SHOW_ROUTINE, SYSTEM_USER, SYSTEM_VARIABLES_ADMIN, TABLE_ENCRYPTION_ADMIN, TRANSACTION_GTID_TAG, XA_RECOVER_ADMIN, TELEMETRY_LOG_ADMIN, ALLOW_NONEXISTENT_DEFINER, APPLICATION_PASSWORD_ADMIN, AUDIT_ABORT_EXEMPT, AUDIT_ADMIN, AUTHENTICATION_POLICY_ADMIN, BACKUP_ADMIN, BINLOG_ADMIN ON *.* TO 'root'@'%';

CREATE USER IF NOT EXISTS 'root'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT;
GRANT USAGE ON *.* TO 'root'@'localhost'
WITH GRANT OPTION;
GRANT ALLOW_NONEXISTENT_DEFINER, ALTER, ALTER ROUTINE, APPLICATION_PASSWORD_ADMIN, AUDIT_ABORT_EXEMPT, AUDIT_ADMIN, AUTHENTICATION_POLICY_ADMIN, BACKUP_ADMIN, BINLOG_ADMIN, BINLOG_ENCRYPTION_ADMIN, CLONE_ADMIN, CONNECTION_ADMIN, CREATE, CREATE ROLE, CREATE ROUTINE, CREATE TABLESPACE, CREATE TEMPORARY TABLES, CREATE USER, CREATE VIEW, DELETE, DROP, DROP ROLE, ENCRYPTION_KEY_ADMIN, EVENT, EXECUTE, FILE, FIREWALL_EXEMPT, FLUSH_OPTIMIZER_COSTS, FLUSH_STATUS, FLUSH_TABLES, FLUSH_USER_RESOURCES, GROUP_REPLICATION_ADMIN, GROUP_REPLICATION_STREAM, INDEX, INNODB_REDO_LOG_ARCHIVE, INNODB_REDO_LOG_ENABLE, INSERT, LOCK TABLES, PASSWORDLESS_USER_ADMIN, PERSIST_RO_VARIABLES_ADMIN, PROCESS, REFERENCES, RELOAD, REPLICATION CLIENT, REPLICATION SLAVE, REPLICATION_APPLIER, REPLICATION_SLAVE_ADMIN, RESOURCE_GROUP_ADMIN, RESOURCE_GROUP_USER, ROLE_ADMIN, SELECT, SENSITIVE_VARIABLES_OBSERVER, SERVICE_CONNECTION_ADMIN, SESSION_VARIABLES_ADMIN, SET_ANY_DEFINER, SHOW DATABASES, SHOW VIEW, SHOW_ROUTINE, SHUTDOWN, SUPER, SYSTEM_USER, SYSTEM_VARIABLES_ADMIN, TABLE_ENCRYPTION_ADMIN, TELEMETRY_LOG_ADMIN, TRANSACTION_GTID_TAG, TRIGGER, UPDATE, XA_RECOVER_ADMIN ON *.* TO 'root'@'localhost';

CREATE ROLE IF NOT EXISTS 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.deletematerial TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.deleteoperator TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertmaterial TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertoperator TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertspecification TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.insertspecification_configuration TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectconditionalperiods TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectendcaps TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectenviroment TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectmaterials TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectmaterialsjson TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectoperators TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectoperatorsjson TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectsettingsspecification TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectspecifications TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectstandards TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectstandardsjson TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selectstandarscomplete TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.selecttesttype TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updatematerial TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updateoperator TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updatespecification TO 'manager'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_static.updatespecification_configuration TO 'manager'@'%';

CREATE ROLE IF NOT EXISTS 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.countspecimens TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.deletetest TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.getspecimendata TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selectcomparetests TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selectsample TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selectsampleid TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selectspecimen TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selecttest TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selecttestdata TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.selecttests TO 'reporting'@'%';
GRANT EXECUTE ON PROCEDURE stel_db_data.updatespecimen TO 'reporting'@'%';

GRANT 'reporting'@'%' TO 'databaseManager'@'%';
SET DEFAULT ROLE 'reporting'@'%' TO 'databaseManager'@'%';

GRANT PROXY ON ''@'' TO 'root'@'%' WITH GRANT OPTION;

GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION;

-- 
-- Dumping data for table material
--
INSERT INTO material VALUES
(1, 'PE', 'Plastico Engomado XD', '2023-12-15 12:45:36', '2024-05-30 20:14:40'),
(2, 'PBC', 'Plastico BC', '2023-12-20 12:57:44', '2024-05-30 20:01:50'),
(12, 'EPC', 'asdasd', '2024-06-03 20:14:41', '2024-06-03 20:14:41');

-- 
-- Dumping data for table specification
--
INSERT INTO specification VALUES
(1, 1, 'PE100', 'Material de PE', '2023-12-15 12:46:03', '2024-05-30 18:57:27'),
(2, 1, 'PE50', 'Material de PE', '2023-12-18 20:06:57', '2024-05-30 18:57:32'),
(3, 2, 'PBC200', 'Material de PBC', '2023-12-20 13:03:02', '2024-05-31 12:16:43'),
(10, 12, 'EGVXX', 'Probando desde postaman', '0000-00-00 00:00:00', '2024-06-04 01:27:38');

-- 
-- Dumping data for table standard
--
INSERT INTO standard VALUES
(1, 'ISO-1167-1996', '2023-12-18 21:16:48', '2024-03-26 02:29:26'),
(2, 'IRAM-4567', '2023-12-04 21:48:00', '2024-03-26 02:29:22');

-- 
-- Dumping data for table test_type
--
INSERT INTO test_type VALUES
(1, 1, 'Prueba de Resistencia con Presión Constante', '2024-03-27 02:22:38', '2024-04-01 11:10:46');

-- 
-- Dumping data for table specification_configuration
--
INSERT INTO specification_configuration VALUES
(1, 1, 1000, 'h', 20, '2024-01-08 00:00:00', '2024-06-03 15:47:59'),
(2, 2, 10, 'h', 150, '2024-01-08 00:00:00', '2024-06-03 15:48:00'),
(3, 2, 30, 'h', 50, '2024-01-08 00:00:00', '2024-06-03 15:48:01'),
(4, 3, 60, 'h', 50, '2024-01-08 00:00:00', '2024-06-03 15:48:02'),
(5, 1, 100, 'h', 90, '2024-01-08 23:13:53', '2024-06-03 15:48:02'),
(11, 10, 23, 'h', 67, '2024-06-04 00:51:15', '2024-06-04 03:21:44');

-- 
-- Dumping data for table operator
--
INSERT INTO operator VALUES
(1, 45672314, 'Camila', 'Matvichenko', '2024-03-27 02:09:41.1974', '2024-05-25 03:15:20.7227'),
(3, 45693035, 'Dinka', 'Salak', '2024-03-27 02:09:26.1003', '2024-05-30 22:39:37.5024'),
(4, 40116590, 'Noelia Agustina', 'Di Mario', '2024-05-29 15:14:53.1109', '2024-05-29 15:30:56.7361'),
(5, 56400346, 'Felipe', 'Daffunchio', '2024-05-29 20:27:42.1353', '2024-05-29 20:27:42.1353'),
(6, 39068857, 'Ezequiel Augusto', 'Stanganelli', '2024-05-30 21:15:13.0273', '2024-05-30 21:15:13.0273'),
(9, 39787234, 'Esteban', 'Baudaux', '2024-05-30 22:43:04.116', '2024-05-30 23:03:47.6609'),
(13, 37762345, 'Francisco Luis', 'Campo', '2024-06-03 19:37:24.8722', '2024-06-03 19:37:24.8722');

-- 
-- Dumping data for table material_has_standard
--
INSERT INTO material_has_standard VALUES
(1, 1, 1, 'Plástico', '2024-03-26 11:24:58', '2024-03-26 11:24:58'),
(2, 2, 2, 'Plástiico', '2024-03-26 11:26:25', '2024-03-26 11:26:25');

-- 
-- Dumping data for table enviroment
--
INSERT INTO enviroment VALUES
(1, 1, 'Agua', 'Agua', '2024-03-27 02:20:46', '2024-03-27 02:20:46'),
(2, 1, 'Agua', 'Liquido', '2024-03-27 02:21:01', '2024-03-27 02:21:01'),
(3, 1, 'Agua', 'Aire', '2024-03-27 02:21:31', '2024-03-27 02:21:31'),
(4, 2, 'Agua', 'Aire', '2024-03-27 02:21:46', '2024-03-27 02:21:46');

-- 
-- Dumping data for table endcap
--
INSERT INTO endcap VALUES
(1, 1, 'Tipo A', '2024-03-31 23:07:41', '2024-03-31 23:07:41'),
(2, 1, 'Tipo B', '2024-03-31 23:07:51', '2024-03-31 23:07:51');

-- 
-- Dumping data for table conditional_period
--
INSERT INTO conditional_period VALUES
(1, 1, '1 h ± 5 min', 0, 3, '2023-12-04 21:48:36', '2024-03-26 00:23:39'),
(2, 1, '3 h ± 15 min', 3, 8, '2023-12-04 21:49:27', '2024-03-26 00:23:59'),
(3, 1, '6 h ± 30 min', 8, 16, '2023-12-04 21:56:39', '2024-03-26 00:24:09'),
(4, 1, '10 h ± 1 h', 16, 32, '2023-12-04 21:56:39', '2024-03-26 00:24:18'),
(5, 1, '16 h ± 1 h', 32, 9999999, '2023-12-04 21:56:39', '2024-03-26 00:24:31');

--
-- Set default database
--
USE stel_db_static;

DELIMITER $$

--
-- Create trigger `deleteSpecificationsChilds`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER IF NOT EXISTS deleteSpecificationsChilds
BEFORE DELETE
ON material
FOR EACH ROW
BEGIN

  DECLARE childsCount int UNSIGNED;

  SELECT
    COUNT(*) INTO childsCount
  FROM specification s
  WHERE s.material = OLD.id;

  IF childsCount > 0 THEN
    DELETE LOW_PRIORITY QUICK
      FROM specification s
    WHERE s.material = OLD.id;

  END IF;

END
$$

--
-- Create trigger `deleteConfigurationsChilds`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER IF NOT EXISTS deleteConfigurationsChilds
BEFORE DELETE
ON specification
FOR EACH ROW
BEGIN

  DECLARE childsCount int UNSIGNED;

  SELECT
    COUNT(*) INTO childsCount
  FROM specification_configuration sc
  WHERE sc.specification = OLD.id;

  IF childsCount > 0 THEN
    DELETE LOW_PRIORITY QUICK
      FROM specification_configuration sc
    WHERE sc.specification = OLD.id;

  END IF;

END
$$

DELIMITER ;

--
-- Restore previous SQL mode
--
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;