--
-- Script was generated by Devart dbForge Studio for MySQL, Version 10.0.150.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 25/6/2024 01:27:42
-- Server version: 8.3.0
--

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

--
-- Set SQL mode
--
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

--
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8mb4';

DROP DATABASE IF EXISTS data_db;

CREATE DATABASE IF NOT EXISTS data_db
CHARACTER SET utf8mb4
COLLATE utf8mb4_0900_ai_ci;

--
-- Set default database
--
USE data_db;

--
-- Create table `sample`
--
CREATE TABLE IF NOT EXISTS sample (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  standard varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  material varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  specification varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  diamreal int UNSIGNED NOT NULL,
  diamnom int UNSIGNED NOT NULL,
  wallthick int UNSIGNED NOT NULL,
  lentotal int UNSIGNED NOT NULL,
  lenfree int UNSIGNED NOT NULL,
  targettemp int NOT NULL,
  targetpressure int NOT NULL,
  condPeriod varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 50,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Test Sample information',
ROW_FORMAT = DYNAMIC;

DELIMITER $$

--
-- Create function `selectTestSample`
--
CREATE
DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS selectTestSample (idSample int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  SET @result = NULL;

  SELECT
    JSON_OBJECT('idSample',
    sa.id,
    'standard',
    sa.standard,
    'material',
    sa.material,
    'specification',
    sa.specification,
    'diameterReal',
    sa.diamreal,
    'diameterNominal',
    sa.diamnom,
    'wallThickness',
    sa.wallthick,
    'lengthTotal',
    sa.lentotal,
    'lengthFree',
    sa.lenfree,
    'targetTemperature',
    sa.targettemp,
    'targetPressure',
    sa.targetpressure,
    'hoopStress',
    ((sa.targettemp * (sa.diamreal - sa.wallthick)) / (10 * 2 * sa.wallthick)),
    'conditionalPeriod',
    sa.condPeriod) INTO @result
  FROM sample sa
  WHERE sa.id = idSample;

  RETURN @result;
END
$$

--
-- Create procedure `selectSampleID`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectSampleID (IN standard varchar(25), IN material varchar(10), IN specification varchar(6), IN diamnom int UNSIGNED, IN diamreal int UNSIGNED, IN wallthick int UNSIGNED, IN lenfree int UNSIGNED, IN lentotal int UNSIGNED, IN targetpressure int, IN targettemp int)
DETERMINISTIC
BEGIN

  SELECT
    ts.id AS idSample
  FROM sample ts
  WHERE (ts.standard LIKE standard
  AND ts.material LIKE material
  AND ts.specification LIKE specification
  AND ts.diamreal = diamreal
  AND ts.diamnom = diamnom
  AND ts.wallthick = wallthick
  AND ts.lenfree = lenfree
  AND ts.lentotal = lentotal
  AND ts.targettemp = targettemp
  AND ts.targetpressure = targetpressure);

END
$$

--
-- Create procedure `selectSample`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectSample (IN idSample int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    s.id AS `idSample`,
    s.standard AS `standard`,
    s.material AS `material`,
    s.specification AS `specification`,
    s.diamreal AS `diamreal`,
    s.diamnom AS `diamnom`,
    s.wallthick AS `wallthickness`,
    s.lenfree AS `lenfree`,
    s.lentotal AS `lentotal`,
    s.condPeriod AS `condPeriod`,
    s.targettemp AS `targettemp`,
    s.targetpressure AS `targetpressure`
  FROM sample s
  WHERE s.id = idSample;

END
$$

--
-- Create procedure `insertSample`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS insertSample (IN standard varchar(25), IN material varchar(10), IN specification varchar(6), IN diamnom int UNSIGNED, IN diamreal int UNSIGNED, IN wallthick int UNSIGNED, IN lenfree int UNSIGNED, IN lentotal int UNSIGNED, IN targetpressure int, IN targettemp int, IN condPeriod varchar(15))
DETERMINISTIC
BEGIN

  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN

    GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @message = MESSAGE_TEXT;
    SELECT
      @message AS `idSample`;

  END;

  INSERT INTO sample (standard, condPeriod, material, specification, targettemp, targetpressure, diamreal, diamnom, wallthick, lenfree, lentotal)
    VALUES (standard, condPeriod, material, specification, targettemp, targetpressure, diamreal, diamnom, wallthick, lenfree, lentotal);

  SELECT
    ts.id AS `idSample`
  FROM sample ts
  ORDER BY ts.id DESC
  LIMIT 1;

END
$$

DELIMITER ;

--
-- Create table `specimen`
--
CREATE TABLE IF NOT EXISTS specimen (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  sample int UNSIGNED NOT NULL,
  operator varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'STEL S.A.',
  enviroment varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '',
  testName varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '',
  endCap varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '',
  failText varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Sin Fallas',
  remark varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Sin Observaciones',
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 136,
AVG_ROW_LENGTH = 910,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Test specimen',
ROW_FORMAT = DYNAMIC;

--
-- Create foreign key
--
ALTER TABLE specimen
ADD CONSTRAINT FK_test_specimen_test_sample_id FOREIGN KEY (sample)
REFERENCES sample (id);

DELIMITER $$

--
-- Create function `specimenExists`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION IF NOT EXISTS specimenExists (idSample int UNSIGNED, start varbinary(255))
RETURNS int(11) UNSIGNED
DETERMINISTIC
BEGIN

  DECLARE idSpecimen boolean;

  SELECT
    ts.id INTO idSpecimen
  FROM specimen ts
  WHERE (ts.sample = idSample
  AND ts.start = start)
  LIMIT 1;

  RETURN idSpecimen;
END
$$

--
-- Create function `selectTestNumber`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION IF NOT EXISTS selectTestNumber (idSpecimen int UNSIGNED)
RETURNS int(11) UNSIGNED
DETERMINISTIC
BEGIN
  SET @testNumber = 0;

  SET @sampleID = (SELECT
      ts.sample
    FROM specimen ts
    WHERE ts.id = idSpecimen);

  SELECT
    COUNT(*) INTO @testNumber
  FROM specimen ts
  WHERE ts.id <= idSpecimen
  AND ts.sample = @sampleID
  GROUP BY ts.sample;

  RETURN @testNumber;
END
$$

--
-- Create function `countSpecimens`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION IF NOT EXISTS countSpecimens (idSpecimen int UNSIGNED)
RETURNS int(11) UNSIGNED
DETERMINISTIC
BEGIN

  SET @count = 0;

  SELECT
    COUNT(*) INTO @count
  FROM specimen ts
  WHERE ts.sample = (SELECT
      se.sample
    FROM specimen se
    WHERE se.id = idSpecimen)
  GROUP BY ts.sample;

  RETURN @count;
END
$$

--
-- Create procedure `updateSpecimen`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS updateSpecimen (IN idSpecimen int UNSIGNED, IN testName varchar(150), IN operator varchar(40), IN fail varchar(255), IN remark varchar(255))
BEGIN

  UPDATE LOW_PRIORITY specimen ts
  SET ts.testName = testName,
      ts.operator = operator,
      ts.failText = fail,
      ts.remark = remark,
      ts.updatedAt = CURRENT_TIMESTAMP()
  WHERE ts.id = idSpecimen;

END
$$

--
-- Create procedure `selectSpecimen`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE IF NOT EXISTS selectSpecimen (IN idSpecimen int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    s.id AS `idSpecimen`,
    s.sample AS `idSample`,
    s.enviroment AS `enviroment`,
    s.testName AS `testName`,
    s.operator AS `operator`,
    s.endCap AS `endCap`
  FROM specimen s
  WHERE s.id = idSpecimen;

END
$$

--
-- Create procedure `insertSpecimen`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS insertSpecimen (IN idSample int UNSIGNED, IN operatorName varchar(40), IN enviromentIn varchar(20), IN testNameIn varchar(120), IN endCapIn varchar(10))
BEGIN

  INSERT INTO specimen (sample, operator, enviroment, testName, endCap, createdAt, updatedAt)
    VALUES (idSample, operatorName, enviromentIn, testNameIn, endCapIn, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP());

  SELECT
    ts.id AS `idSpecimen`
  FROM specimen ts
  ORDER BY ts.id DESC
  LIMIT 1;

END
$$

--
-- Create procedure `deleteTest`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS deleteTest (IN idSpecimen int UNSIGNED)
BEGIN

  DELETE LOW_PRIORITY QUICK
    FROM specimen ts
  WHERE ts.id = idSpecimen;

END
$$

--
-- Create procedure `countSpecimens`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS countSpecimens (IN idSample int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    COUNT(ts.sample) AS counts
  FROM specimen ts
  WHERE ts.sample = idSample;

END
$$

DELIMITER ;

--
-- Create table `data`
--
CREATE TABLE IF NOT EXISTS data (
  id int UNSIGNED NOT NULL AUTO_INCREMENT,
  specimen int UNSIGNED NOT NULL,
  pressure double NOT NULL,
  temperature double NOT NULL,
  createdAt datetime(4) DEFAULT CURRENT_TIMESTAMP(4),
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3887,
AVG_ROW_LENGTH = 58,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Data Recollected from PLC',
ROW_FORMAT = DYNAMIC;

--
-- Create index `IDX_test_data_test_specimen` on table `data`
--
ALTER TABLE data
ADD INDEX IDX_test_data_test_specimen (specimen);

--
-- Create foreign key
--
ALTER TABLE data
ADD CONSTRAINT FK_test_data_test_specimen_id FOREIGN KEY (specimen)
REFERENCES specimen (id);

DELIMITER $$

--
-- Create function `selectTestLimit`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION IF NOT EXISTS selectTestLimit (idSpecimen int UNSIGNED, isASC tinyint UNSIGNED)
RETURNS datetime
DETERMINISTIC
BEGIN

  SET @Time = NULL;

  IF isASC = 0 THEN
    SELECT
      td.createdAt INTO @Time
    FROM data td
    WHERE td.specimen = idSpecimen
    ORDER BY td.createdAt ASC LIMIT 1;
  ELSE
    SELECT
      td.createdAt INTO @Time
    FROM data td
    WHERE td.specimen = idSpecimen
    ORDER BY td.createdAt DESC LIMIT 1;
  END IF;

  RETURN @Time;
END
$$

--
-- Create function `selectTestsSpecimens`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION IF NOT EXISTS selectTestsSpecimens (idSample int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN
  SET @myResult = NULL;

  WITH preResults
  AS
  (SELECT
      ts.id,
      ts.operator,
      selectTestNumber(ts.id) AS testNumber,
      (selectTestLimit(ts.id, 0)) AS beginTime,
      (selectTestLimit(ts.id, 1)) AS endTime
    FROM specimen ts
    WHERE ts.sample = idSample)

  (SELECT
      JSON_ARRAYAGG(JSON_OBJECT('idSpecimen', pr.id,
      'operator', pr.operator, 'testNumber', pr.testNumber, 'beginTime', DATE_FORMAT(pr.beginTime, '%d/%m/%Y %H:%i:%s'), 'endTime', DATE_FORMAT(pr.endTime, '%d/%m/%Y %H:%i:%s'), 'duration', DATE_FORMAT(TIMEDIFF(pr.endTime, pr.beginTime), '%H:%i:%s'))) INTO @myResult
    FROM preResults pr
    ORDER BY pr.id DESC);

  RETURN @myResult;
END
$$

--
-- Create procedure `selectTests`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectTests ()
DETERMINISTIC
BEGIN

  SELECT
    ts.id AS idSample,
    ts.standard AS standard,
    ts.material AS material,
    selectTestsSpecimens(ts.id) AS mySpecimens
  FROM sample ts;

END
$$

--
-- Create function `selectTestSpecimen`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION IF NOT EXISTS selectTestSpecimen (idSpecimen int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  SET @result = NULL;

  SET @countSpecimens = countSpecimens(idSpecimen);

  SET @beginTime = selectTestLimit(idSpecimen, 0);

  SET @endTime = selectTestLimit(idSpecimen, 1);

  SET @testNumber = selectTestNumber(idSpecimen);

  SELECT
    JSON_OBJECT('idSpecimen',
    se.id,
    'operator',
    se.operator,
    'enviroment',
    se.enviroment,
    'beginTime',
    DATE_FORMAT(@beginTime,
    '%d/%m/%Y %H:%i:%s'),
    'endTime',
    DATE_FORMAT(@endTime,
    '%d/%m/%Y %H:%i:%s'),
    'duration',
    DATE_FORMAT(TIMEDIFF(@endTime,
    @beginTime),
    '%H:%i:%s'),
    'counts',
    @countSpecimens,
    'testNumber',
    @testNumber,
    'testName',
    se.testName,
    'endCap',
    se.endCap,
    'fail',
    se.failText,
    'remark',
    se.remark) INTO @result
  FROM specimen se
  WHERE se.id = idSpecimen;

  RETURN @result;
END
$$

--
-- Create procedure `selectTest`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectTest (IN idSpecimen int UNSIGNED)
DETERMINISTIC
BEGIN

  SELECT
    (selectTestSample(sa.id)) AS 'mySample',
    (selectTestSpecimen(se.id)) AS 'mySpecimen'
  FROM specimen se
    INNER JOIN sample sa
      ON se.sample = sa.id
  WHERE se.id = idSpecimen;

END
$$

--
-- Create function `selectTestData`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION IF NOT EXISTS selectTestData (idSpecimen int UNSIGNED)
RETURNS json
DETERMINISTIC
BEGIN

  SET @returnData = NULL;

  SET @initTime = (SELECT
      td.createdAt
    FROM data td
    WHERE td.specimen = idSpecimen
    ORDER BY td.createdAt ASC LIMIT 1);

  WITH groupingData
  AS
  (SELECT
      td.createdAt,
      AVG(td.pressure) AS 'pressure',
      AVG(td.temperature) AS 'temperature'
    FROM data td
    WHERE td.specimen = idSpecimen
    GROUP BY td.createdAt)

  SELECT
    JSON_ARRAYAGG(JSON_OBJECT('key',
    TIMESTAMPDIFF(SECOND, @initTime, gd.createdAt),
    'pressure',
    gd.pressure,
    'temperature',
    gd.temperature)) INTO @returnData
  FROM groupingData gd;

  RETURN @returnData;
END
$$

--
-- Create procedure `selectCompareTests`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectCompareTests (IN arraySpecimens text)
DETERMINISTIC
BEGIN

  SELECT
    (selectTestSample(sa.id)) AS 'mySample',
    (selectTestSpecimen(se.id)) AS 'mySpecimen',
    (selectTestData(se.id)) AS 'myData'
  FROM specimen se
    INNER JOIN sample sa
      ON se.sample = sa.id
  WHERE FIND_IN_SET(se.id, arraySpecimens) > 0;

END
$$

--
-- Create procedure `selectTestData`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS selectTestData (IN idSpecimen int UNSIGNED)
DETERMINISTIC
BEGIN

  SET @initTime = (SELECT
      td.createdAt
    FROM data td
    WHERE td.specimen = idSpecimen
    ORDER BY td.createdAt ASC LIMIT 1);

  WITH groupingData
  AS
  (SELECT
      td.createdAt,
      AVG(td.pressure) AS 'pressure',
      AVG(td.temperature) AS 'temperature'
    FROM data td
    WHERE td.specimen = idSpecimen
    GROUP BY td.createdAt)

  SELECT
    TIMESTAMPDIFF(SECOND, @initTime, gd.createdAt) AS 'key',
    gd.pressure AS 'pressure',
    gd.temperature AS 'temperature'
  FROM groupingData gd;

END
$$

--
-- Create procedure `insertData`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS insertData (IN idSpecimen int UNSIGNED, IN pressure double, IN temperature double)
BEGIN

  INSERT INTO data (specimen, pressure, temperature, createdAt)
    VALUES (idSpecimen, pressure, temperature, NOW());

END
$$

--
-- Create procedure `getSpecimenData`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE IF NOT EXISTS getSpecimenData (IN mySpecimenID int UNSIGNED)
DETERMINISTIC
BEGIN

  CREATE TEMPORARY TABLE IF NOT EXISTS myResult AS (SELECT
      td.id,
      td.pressure,
      td.temperature,
      # td.createdAt,
      (TIMESTAMPDIFF(MICROSECOND, (SELECT
          td2.createdAt
        FROM data td2
        WHERE td2.specimen = mySpecimenID LIMIT 1), td.createdAt)) AS `difference`
    FROM data td
    WHERE td.specimen = mySpecimenID);

  SELECT
    ts.id AS `idTest`,
    (SELECT
        JSON_ARRAYAGG(JSON_OBJECT('id', r.id, 'pressure', r.pressure, 'temperature', r.temperature, 'timekey', r.difference))
      FROM myResult r) AS `testData`
  FROM specimen ts
    INNER JOIN sample ts1
      ON ts.sample = ts1.id
  WHERE ts.id = mySpecimenID;

  DROP TEMPORARY TABLE IF EXISTS myResult;

END
$$

DELIMITER ;

CREATE USER IF NOT EXISTS 'dataCollector'@'%' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE NEVER;
GRANT EXECUTE ON PROCEDURE data_db.countspecimens TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE data_db.insertdata TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE data_db.insertsample TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE data_db.insertspecimen TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE data_db.selectsample TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE data_db.selectsampleid TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE data_db.selectspecimen TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectconditionalperiods TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectendcaps TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectenviroment TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectmaterials TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectoperators TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectsettingsspecification TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectspecifications TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectstandards TO 'dataCollector'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selecttesttype TO 'dataCollector'@'%';

CREATE USER IF NOT EXISTS 'databaseManager'@'%' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE NEVER;
GRANT SELECT ON TABLE static_db.material TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deleteconditionalperiod TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deleteendcap TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deleteenviroment TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deletematerial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deleteoperator TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deleterelatedmaterial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deletespecification TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deletespecification_configuration TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deletestandard TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.deletetesttype TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertconditionalperiod TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertendcap TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertenviroment TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertmaterial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertoperator TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertrelatedmaterial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertspecification TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertspecification_configuration TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.insertstandard TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.inserttesttype TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectmaterialsjson TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectoperatorsjson TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.selectstandardsjson TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.updatematerial TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.updateoperator TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.updatespecification TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.updatespecification_configuration TO 'databaseManager'@'%';
GRANT EXECUTE ON PROCEDURE static_db.updatestandard TO 'databaseManager'@'%';

CREATE USER IF NOT EXISTS 'mysql.infoschema'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;
GRANT SELECT, AUDIT_ABORT_EXEMPT, FIREWALL_EXEMPT, SYSTEM_USER ON *.* TO 'mysql.infoschema'@'localhost';

CREATE USER IF NOT EXISTS 'mysql.session'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;
GRANT SHUTDOWN, SUPER, AUDIT_ABORT_EXEMPT, AUTHENTICATION_POLICY_ADMIN, BACKUP_ADMIN, CLONE_ADMIN, CONNECTION_ADMIN, FIREWALL_EXEMPT, PERSIST_RO_VARIABLES_ADMIN, SESSION_VARIABLES_ADMIN, SYSTEM_USER, SYSTEM_VARIABLES_ADMIN ON *.* TO 'mysql.session'@'localhost';
GRANT SELECT ON performance_schema.* TO 'mysql.session'@'localhost';
GRANT SELECT ON TABLE mysql.user TO 'mysql.session'@'localhost';

CREATE USER IF NOT EXISTS 'mysql.sys'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT ACCOUNT LOCK;
GRANT AUDIT_ABORT_EXEMPT, FIREWALL_EXEMPT, SYSTEM_USER ON *.* TO 'mysql.sys'@'localhost';
GRANT TRIGGER ON sys.* TO 'mysql.sys'@'localhost';
GRANT SELECT ON TABLE sys.sys_config TO 'mysql.sys'@'localhost';

CREATE USER IF NOT EXISTS 'reportGenerator'@'%' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE NEVER;
GRANT EXECUTE ON *.* TO 'reportGenerator'@'%';
GRANT EXECUTE ON static_db.* TO 'reportGenerator'@'%';
GRANT EXECUTE ON PROCEDURE data_db.deletetest TO 'reportGenerator'@'%';
GRANT EXECUTE ON PROCEDURE data_db.selectcomparetests TO 'reportGenerator'@'%';
GRANT EXECUTE ON PROCEDURE data_db.selecttest TO 'reportGenerator'@'%';
GRANT EXECUTE ON PROCEDURE data_db.selecttestdata TO 'reportGenerator'@'%';
GRANT EXECUTE ON PROCEDURE data_db.selecttests TO 'reportGenerator'@'%';
GRANT EXECUTE ON PROCEDURE data_db.updatespecimen TO 'reportGenerator'@'%';

CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT;
GRANT USAGE ON *.* TO 'root'@'%'
WITH GRANT OPTION;
GRANT ALTER, ALTER ROUTINE, CREATE, CREATE ROLE, CREATE ROUTINE, CREATE TABLESPACE, CREATE TEMPORARY TABLES, CREATE USER, CREATE VIEW, DELETE, DROP, DROP ROLE, EVENT, EXECUTE, FILE, INDEX, INSERT, LOCK TABLES, PROCESS, REFERENCES, RELOAD, REPLICATION CLIENT, REPLICATION SLAVE, SELECT, SHOW DATABASES, SHOW VIEW, SHUTDOWN, SUPER, TRIGGER, UPDATE, ALLOW_NONEXISTENT_DEFINER, APPLICATION_PASSWORD_ADMIN, AUDIT_ABORT_EXEMPT, AUDIT_ADMIN, AUTHENTICATION_POLICY_ADMIN, BACKUP_ADMIN, BINLOG_ADMIN, BINLOG_ENCRYPTION_ADMIN, CLONE_ADMIN, CONNECTION_ADMIN, ENCRYPTION_KEY_ADMIN, FIREWALL_EXEMPT, FLUSH_OPTIMIZER_COSTS, FLUSH_STATUS, FLUSH_TABLES, FLUSH_USER_RESOURCES, GROUP_REPLICATION_ADMIN, GROUP_REPLICATION_STREAM, INNODB_REDO_LOG_ARCHIVE, INNODB_REDO_LOG_ENABLE, PASSWORDLESS_USER_ADMIN, PERSIST_RO_VARIABLES_ADMIN, REPLICATION_APPLIER, REPLICATION_SLAVE_ADMIN, RESOURCE_GROUP_ADMIN, RESOURCE_GROUP_USER, ROLE_ADMIN, SENSITIVE_VARIABLES_OBSERVER, SERVICE_CONNECTION_ADMIN, SESSION_VARIABLES_ADMIN, SET_ANY_DEFINER, SHOW_ROUTINE, SYSTEM_USER, SYSTEM_VARIABLES_ADMIN, TABLE_ENCRYPTION_ADMIN, TELEMETRY_LOG_ADMIN, TRANSACTION_GTID_TAG, XA_RECOVER_ADMIN ON *.* TO 'root'@'%';

CREATE USER IF NOT EXISTS 'root'@'localhost' IDENTIFIED WITH caching_sha2_password PASSWORD EXPIRE DEFAULT;
GRANT USAGE ON *.* TO 'root'@'localhost'
WITH GRANT OPTION;
GRANT ALLOW_NONEXISTENT_DEFINER, ALTER, ALTER ROUTINE, APPLICATION_PASSWORD_ADMIN, AUDIT_ABORT_EXEMPT, AUDIT_ADMIN, AUTHENTICATION_POLICY_ADMIN, BACKUP_ADMIN, BINLOG_ADMIN, BINLOG_ENCRYPTION_ADMIN, CLONE_ADMIN, CONNECTION_ADMIN, CREATE, CREATE ROLE, CREATE ROUTINE, CREATE TABLESPACE, CREATE TEMPORARY TABLES, CREATE USER, CREATE VIEW, DELETE, DROP, DROP ROLE, ENCRYPTION_KEY_ADMIN, EVENT, EXECUTE, FILE, FIREWALL_EXEMPT, FLUSH_OPTIMIZER_COSTS, FLUSH_STATUS, FLUSH_TABLES, FLUSH_USER_RESOURCES, GROUP_REPLICATION_ADMIN, GROUP_REPLICATION_STREAM, INDEX, INNODB_REDO_LOG_ARCHIVE, INNODB_REDO_LOG_ENABLE, INSERT, LOCK TABLES, PASSWORDLESS_USER_ADMIN, PERSIST_RO_VARIABLES_ADMIN, PROCESS, REFERENCES, RELOAD, REPLICATION CLIENT, REPLICATION SLAVE, REPLICATION_APPLIER, REPLICATION_SLAVE_ADMIN, RESOURCE_GROUP_ADMIN, RESOURCE_GROUP_USER, ROLE_ADMIN, SELECT, SENSITIVE_VARIABLES_OBSERVER, SERVICE_CONNECTION_ADMIN, SESSION_VARIABLES_ADMIN, SET_ANY_DEFINER, SHOW DATABASES, SHOW VIEW, SHOW_ROUTINE, SHUTDOWN, SUPER, SYSTEM_USER, SYSTEM_VARIABLES_ADMIN, TABLE_ENCRYPTION_ADMIN, TELEMETRY_LOG_ADMIN, TRANSACTION_GTID_TAG, TRIGGER, UPDATE, XA_RECOVER_ADMIN ON *.* TO 'root'@'localhost';

GRANT PROXY ON ''@'' TO 'root'@'%' WITH GRANT OPTION;

GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION;

-- Table data_db.sample does not contain any data (it is empty)

-- Table data_db.specimen does not contain any data (it is empty)

-- Table data_db.data does not contain any data (it is empty)

--
-- Set default database
--
USE data_db;

DELIMITER $$

--
-- Create trigger `NewSample`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER IF NOT EXISTS NewSample
BEFORE INSERT
ON sample
FOR EACH ROW
BEGIN

  DECLARE row_id int UNSIGNED;

  SELECT
    s.id INTO row_id
  FROM sample s
  WHERE s.standard LIKE NEW.standard
  AND s.material LIKE NEW.material
  AND s.specification LIKE NEW.specification
  AND s.diamreal = NEW.diamreal
  AND s.diamnom = NEW.diamnom
  AND s.lentotal = NEW.lentotal
  AND s.lenfree = NEW.lenfree
  AND s.wallthick = NEW.wallthick
  AND s.targettemp = new.targettemp
  AND s.targetpressure = NEW.targetpressure;

  IF row_id IS NOT NULL THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = row_id;
  END IF;

END
$$

--
-- Create trigger `DeleteTestSample`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER IF NOT EXISTS DeleteTestSample
AFTER DELETE
ON specimen
FOR EACH ROW
BEGIN

  SET @countTests = 0;

  SELECT
    COUNT(*) INTO @countTests
  FROM specimen ts
  WHERE ts.sample = OLD.sample;

  IF @countTests < 1 THEN

    DELETE LOW_PRIORITY QUICK
      FROM sample
    WHERE sample.id = OLD.sample;

  END IF;

END
$$

--
-- Create trigger `DeleteTest`
--
CREATE
DEFINER = 'root'@'%'
TRIGGER IF NOT EXISTS DeleteTest
BEFORE DELETE
ON specimen
FOR EACH ROW
BEGIN

  DELETE LOW_PRIORITY QUICK
    FROM data td
  WHERE td.specimen = OLD.id;

END
$$

DELIMITER ;

--
-- Restore previous SQL mode
--
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;