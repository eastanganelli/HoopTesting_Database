--
-- Script was generated by Devart dbForge Studio 2022 for MySQL, Version 9.1.21.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 20/1/2024 16:07:59
-- Server version: 5.7.44
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

DROP DATABASE IF EXISTS STEL_DB_DATA;

CREATE DATABASE IF NOT EXISTS STEL_DB_DATA
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Set default database
--
USE STEL_DB_DATA;

--
-- Create table `test_sample`
--
CREATE TABLE IF NOT EXISTS test_sample (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  standard varchar(25) NOT NULL,
  material varchar(10) NOT NULL,
  specification varchar(10) NOT NULL,
  diamreal int(11) UNSIGNED NOT NULL,
  diamnom int(11) UNSIGNED NOT NULL,
  wallthick int(11) UNSIGNED NOT NULL,
  lentotal int(11) UNSIGNED NOT NULL,
  lenfree int(11) UNSIGNED NOT NULL,
  targettemp int(11) NOT NULL,
  targetpressure int(11) NOT NULL,
  condPeriod varchar(15) NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Test Sample information';

DELIMITER $$

--
-- Create function `sampleExists`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION sampleExists (standard varchar(25), material varchar(10), specification varchar(6), diamnom int UNSIGNED, diamreal int UNSIGNED, wallthick int UNSIGNED, lenfree int UNSIGNED, lentotal int UNSIGNED, targetpressure int, targettemp int)
RETURNS int(11) UNSIGNED
BEGIN

  DECLARE idSample int UNSIGNED;

  SELECT
    ts.id INTO idSample
  FROM test_sample ts
  WHERE (ts.standard = standard
  AND ts.material = material
  AND ts.specification = specification
  AND ts.diamreal = diamreal
  AND ts.diamnom = diamnom
  AND ts.wallthick = wallthick
  AND ts.lenfree = lenfree
  AND ts.lentotal = lentotal
  AND ts.targettemp = targettemp
  AND ts.targetpressure = targetpressure)
  LIMIT 1;

  RETURN idSample;
END
$$

--
-- Create function `newSample`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION newSample (standard varchar(25), material varchar(10), specification varchar(6), diamnom int UNSIGNED, diamreal int UNSIGNED, wallthick int UNSIGNED, lenfree int UNSIGNED, lentotal int UNSIGNED, targetpressure int, targettemp int, condPeriod varchar(15))
RETURNS int(11)
BEGIN

  DECLARE idSample int UNSIGNED;

  INSERT INTO test_sample (standard, condPeriod, material, specification, targettemp, targetpressure, diamreal, diamnom, wallthick, lenfree, lentotal, createdAt, updatedAt)
    VALUES (standard, condPeriod, material, specification, targettemp, targetpressure, diamreal, diamnom, wallthick, lenfree, lentotal, NOW(), NOW());

  SELECT
    ts.id INTO idSample
  FROM test_sample ts
  ORDER BY ts.id DESC
  LIMIT 1;

  RETURN idSample;
END
$$

--
-- Create procedure `insertSample`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insertSample (IN standard varchar(25), IN material varchar(10), IN specification varchar(6), IN diamnom int UNSIGNED, IN diamreal int UNSIGNED, IN wallthick int UNSIGNED, IN lenfree int UNSIGNED, IN lentotal int UNSIGNED, IN targetpressure int, IN targettemp int, IN condPeriod varchar(15))
BEGIN

  DECLARE idSample int UNSIGNED;

  SET idSample := sampleExists(standard, material, specification, diamnom, diamreal, wallthick, lenfree, lentotal, targetpressure, targettemp);

  IF idSample IS NULL THEN
    SET idSample := newSample(standard, material, specification, diamnom, diamreal, wallthick, lenfree, lentotal, targetpressure, targettemp, condPeriod);
  END IF;

  SELECT
    idSample AS 'idSample';

END
$$

--
-- Create procedure `getSample`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE getSample (IN idSample int UNSIGNED)
BEGIN

  SELECT
    ts.standard,
    ts.material,
    ts.specification,
    ts.diamreal,
    ts.diamnom,
    ts.wallthick,
    ts.lentotal,
    ts.lenfree,
    ts.targetpressure,
    ts.targettemp,
    ts.condPeriod
  FROM test_sample ts
  WHERE ts.id = idSample;

END
$$

--
-- Create procedure `get_idSample`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_idSample (standard varchar(25), material varchar(10), specification varchar(6), diamnom int UNSIGNED, diamreal int UNSIGNED, wallthick int UNSIGNED, lenfree int UNSIGNED, lentotal int UNSIGNED, targetpressure int, targettemp int)
BEGIN

  SELECT
    ts.id AS idSample
  FROM test_sample ts
  WHERE (ts.standard = standard
  AND ts.material = material
  AND ts.specification = specification
  AND ts.diamreal = diamreal
  AND ts.diamnom = diamnom
  AND ts.wallthick = wallthick
  AND ts.lenfree = lenfree
  AND ts.lentotal = lentotal
  AND ts.targettemp = targettemp
  AND ts.targetpressure = targetpressure)
  LIMIT 1;

END
$$

DELIMITER ;

--
-- Create table `test_specimen`
--
CREATE TABLE IF NOT EXISTS test_specimen (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  test_sample int(11) UNSIGNED NOT NULL,
  operator int(11) UNSIGNED NOT NULL,
  enviromental varchar(7) DEFAULT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 77,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Test specimen';

--
-- Create foreign key
--
ALTER TABLE test_specimen
ADD CONSTRAINT FK_test_specimen_test_sample_id FOREIGN KEY (test_sample)
REFERENCES test_sample (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create function `specimenExists`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION specimenExists (idSample int UNSIGNED, start varbinary(255))
RETURNS int(11) UNSIGNED
BEGIN

  DECLARE idSpecimen int UNSIGNED;

  SELECT
    ts.id INTO idSpecimen
  FROM test_specimen ts
  WHERE (ts.test_sample = idSample
  AND ts.start = start)
  LIMIT 1;

  RETURN idSpecimen;
END
$$

--
-- Create function `newSpecimen`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION newSpecimen (idSample int UNSIGNED, idOperator int UNSIGNED, enviromental varchar(7))
RETURNS int(11)
BEGIN

  DECLARE idSpecimen int UNSIGNED;

  INSERT INTO test_specimen (test_sample, operator, start, end, enviromental, createdAt, updatedAt)
    VALUES (idSample, idOperator, CURRENT_TIMESTAMP(), NULL, enviromental, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP());

  SELECT
    ts.id INTO idSpecimen
  FROM test_specimen ts
  ORDER BY ts.id DESC
  LIMIT 1;

  RETURN idSpecimen;
END
$$

--
-- Create procedure `insertSpecimen`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insertSpecimen (IN idSample int UNSIGNED, IN idOperator int UNSIGNED, IN enviromental varchar(10))
BEGIN
  /*
  DECLARE idSpecimen int UNSIGNED;
  
  SET idSpecimen = specimenExists(idSample, startDate);
  
  IF idSpecimen IS NULL THEN
    SET idSpecimen := newSpecimen(idSample, idOperator, enviromental);
  END IF;
  */

  INSERT INTO test_specimen (test_sample, operator, enviromental, createdAt, updatedAt)
    VALUES (idSample, idOperator, enviromental, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP());

  SELECT
    ts.id AS idSpecimen
  FROM test_specimen ts
  ORDER BY ts.id DESC
  LIMIT 1;

END
$$

--
-- Create procedure `getSpecimen`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE getSpecimen (IN idSpecimen varchar(255))
BEGIN

  SELECT
    test_specimen.test_sample AS 'idSample',
    test_specimen.operator,
    test_specimen.enviromental
  FROM test_specimen ts
  WHERE ts.id = idSpecimen;

END
$$

--
-- Create procedure `countSpecimens`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE countSpecimens (IN idSample int UNSIGNED)
BEGIN

  SELECT
    COUNT(ts.test_sample) AS counts
  FROM test_specimen ts
  WHERE ts.test_sample = idSample;

END
$$

DELIMITER ;

--
-- Create table `test_data`
--
CREATE TABLE IF NOT EXISTS test_data (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  test_specimen int(11) UNSIGNED NOT NULL,
  pressure double NOT NULL,
  temperature double NOT NULL,
  createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 266,
AVG_ROW_LENGTH = 109,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
COMMENT = 'Data Recollected from PLC';

--
-- Create index `IDX_test_data_test_specimen` on table `test_data`
--
ALTER TABLE test_data
ADD INDEX IDX_test_data_test_specimen (test_specimen);

--
-- Create foreign key
--
ALTER TABLE test_data
ADD CONSTRAINT FK_test_data_test_specimen_id FOREIGN KEY (test_specimen)
REFERENCES test_specimen (id) ON DELETE NO ACTION ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create procedure `insertData`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insertData (IN idSpecimen int UNSIGNED, IN pressure double, IN temperature double)
BEGIN

  INSERT INTO test_data (test_specimen, pressure, temperature, createdAt)
    VALUES (idSpecimen, pressure, temperature, NOW());

END
$$

DELIMITER ;

-- 
-- Dumping data for table test_sample
--
INSERT INTO test_sample VALUES
(9, 'ISO-1167-1996', 'PE', 'PE100', 50, 50, 5, 560, 340, 20, 9, '3 h ± 15 min', '2024-01-19 23:29:24', '2024-01-19 23:29:24'),
(10, 'IRAM-4567', 'PE', 'PE50', 50, 50, 5, 560, 340, 150, 9, '3 h ± 15 min', '2024-01-20 00:15:05', '2024-01-20 00:15:05');

-- 
-- Dumping data for table test_specimen
--
INSERT INTO test_specimen VALUES
(71, 9, 0, 'water', '2024-01-19 23:29:24', '2024-01-19 23:29:24'),
(72, 9, 0, 'water', '2024-01-20 00:13:17', '2024-01-20 00:13:17'),
(73, 9, 0, 'water', '2024-01-20 00:13:57', '2024-01-20 00:13:57'),
(75, 10, 0, 'water', '2024-01-20 00:15:05', '2024-01-20 00:15:05'),
(76, 9, 0, 'water', '2024-01-20 19:06:18', '2024-01-20 19:06:18');

-- 
-- Dumping data for table test_data
--
INSERT INTO test_data VALUES
(1, 71, 0.03, -0.06, '2024-01-19 23:29:24'),
(2, 71, 0.65, 1.43, '2024-01-19 23:29:24'),
(3, 71, 1.15, 2.32, '2024-01-19 23:29:24'),
(4, 71, 1.32, 3.02, '2024-01-19 23:29:25'),
(5, 71, 1.62, 3.46, '2024-01-19 23:29:25'),
(6, 71, 1.7, 3.84, '2024-01-19 23:29:25'),
(7, 71, 1.81, 4.14, '2024-01-19 23:29:25'),
(8, 71, 2.03, 4.47, '2024-01-19 23:29:26'),
(9, 71, 2.14, 4.79, '2024-01-19 23:29:26'),
(10, 71, 2.23, 4.92, '2024-01-19 23:29:26'),
(11, 71, 2.35, 5.14, '2024-01-19 23:29:26'),
(12, 71, 2.39, 5.39, '2024-01-19 23:29:27'),
(13, 71, 2.53, 5.58, '2024-01-19 23:29:27'),
(14, 71, 2.52, 5.71, '2024-01-19 23:29:27'),
(15, 71, 2.7, 5.83, '2024-01-19 23:29:27'),
(16, 71, 2.61, 5.92, '2024-01-19 23:29:28'),
(17, 71, 2.79, 6.16, '2024-01-19 23:29:28'),
(18, 71, 2.89, 6.21, '2024-01-19 23:29:28'),
(19, 71, 2.93, 6.31, '2024-01-19 23:29:28'),
(20, 71, 2.9, 6.42, '2024-01-19 23:29:29'),
(21, 71, 3.04, 6.47, '2024-01-19 23:29:29'),
(22, 71, 2.91, 6.69, '2024-01-19 23:29:29'),
(23, 71, 3.05, 6.73, '2024-01-19 23:29:29'),
(24, 71, 3.11, 6.75, '2024-01-19 23:29:30'),
(25, 71, 3.04, 6.93, '2024-01-19 23:29:30'),
(26, 71, 3.2, 7.01, '2024-01-19 23:29:30'),
(27, 71, 3.22, 7.19, '2024-01-19 23:29:30'),
(28, 71, 3.32, 7.18, '2024-01-19 23:29:31'),
(29, 71, 3.3, 7.3, '2024-01-19 23:29:31'),
(30, 71, 3.35, 7.23, '2024-01-19 23:29:31'),
(31, 71, 3.25, 7.36, '2024-01-19 23:29:31'),
(32, 71, 3.36, 7.42, '2024-01-19 23:29:32'),
(33, 71, 3.34, 7.54, '2024-01-19 23:29:32'),
(34, 73, 0.07, 0, '2024-01-20 00:13:57'),
(35, 73, 0.71, 1.41, '2024-01-20 00:13:57'),
(36, 73, 1.02, 2.42, '2024-01-20 00:13:58'),
(37, 73, 1.41, 3, '2024-01-20 00:13:58'),
(38, 73, 1.58, 3.53, '2024-01-20 00:13:58'),
(39, 73, 1.78, 3.83, '2024-01-20 00:13:58'),
(40, 73, 1.87, 4.25, '2024-01-20 00:13:59'),
(41, 73, 1.97, 4.54, '2024-01-20 00:13:59'),
(42, 73, 2.21, 4.75, '2024-01-20 00:13:59'),
(43, 73, 2.32, 5, '2024-01-20 00:13:59'),
(44, 73, 2.33, 5.13, '2024-01-20 00:14:00'),
(45, 73, 2.45, 5.36, '2024-01-20 00:14:00'),
(46, 73, 2.57, 5.56, '2024-01-20 00:14:00'),
(47, 73, 2.49, 5.77, '2024-01-20 00:14:00'),
(48, 73, 2.63, 5.91, '2024-01-20 00:14:01'),
(49, 73, 2.69, 6.08, '2024-01-20 00:14:01'),
(50, 73, 2.72, 6.17, '2024-01-20 00:14:01'),
(51, 73, 2.76, 6.34, '2024-01-20 00:14:02'),
(52, 73, 2.89, 6.53, '2024-01-20 00:14:02'),
(53, 73, 2.98, 6.52, '2024-01-20 00:14:02'),
(54, 73, 3, 6.6, '2024-01-20 00:14:02'),
(55, 73, 3.12, 6.66, '2024-01-20 00:14:03'),
(56, 73, 3.05, 6.92, '2024-01-20 00:14:03'),
(57, 73, 3.1, 6.94, '2024-01-20 00:14:03'),
(58, 73, 3.21, 7.1, '2024-01-20 00:14:03'),
(59, 73, 3.19, 7.16, '2024-01-20 00:14:04'),
(60, 73, 3.29, 7.23, '2024-01-20 00:14:04'),
(61, 73, 3.24, 7.16, '2024-01-20 00:14:04'),
(62, 73, 3.33, 7.34, '2024-01-20 00:14:04'),
(63, 73, 3.33, 7.46, '2024-01-20 00:14:05'),
(64, 73, 3.43, 7.5, '2024-01-20 00:14:05'),
(65, 73, 3.41, 7.53, '2024-01-20 00:14:05'),
(66, 73, 3.46, 7.59, '2024-01-20 00:14:05'),
(67, 73, 3.46, 7.73, '2024-01-20 00:14:06'),
(68, 73, 3.54, 7.75, '2024-01-20 00:14:06'),
(69, 73, 3.59, 7.86, '2024-01-20 00:14:06'),
(70, 73, 3.61, 7.77, '2024-01-20 00:14:06'),
(71, 73, 3.55, 7.97, '2024-01-20 00:14:07'),
(72, 73, 3.56, 7.89, '2024-01-20 00:14:07'),
(73, 73, 3.51, 7.93, '2024-01-20 00:14:07'),
(74, 73, 3.59, 8.06, '2024-01-20 00:14:07'),
(75, 73, 3.64, 8.16, '2024-01-20 00:14:08'),
(76, 73, 3.67, 8.14, '2024-01-20 00:14:08'),
(77, 73, 3.6, 8.16, '2024-01-20 00:14:08'),
(78, 73, 3.75, 8.33, '2024-01-20 00:14:08'),
(79, 73, 3.65, 8.21, '2024-01-20 00:14:09'),
(80, 73, 3.82, 8.31, '2024-01-20 00:14:09'),
(81, 73, 3.74, 8.39, '2024-01-20 00:14:09'),
(82, 73, 3.72, 8.46, '2024-01-20 00:14:09'),
(83, 73, 3.87, 8.48, '2024-01-20 00:14:10'),
(84, 73, 3.74, 8.57, '2024-01-20 00:14:10'),
(85, 73, 3.82, 8.47, '2024-01-20 00:14:10'),
(86, 73, 3.78, 8.61, '2024-01-20 00:14:10'),
(168, 75, 0.05, -0.06, '2024-01-20 00:15:06'),
(170, 75, 0.68, 11.21, '2024-01-20 00:15:06'),
(172, 75, 1.12, 17.75, '2024-01-20 00:15:06'),
(174, 75, 1.54, 26.08, '2024-01-20 00:15:07'),
(176, 75, 1.79, 29.02, '2024-01-20 00:15:07'),
(178, 75, 1.88, 31.48, '2024-01-20 00:15:07'),
(180, 75, 2.17, 35.53, '2024-01-20 00:15:08'),
(182, 75, 2.15, 37.19, '2024-01-20 00:15:08'),
(184, 75, 2.3, 38.8, '2024-01-20 00:15:08'),
(186, 75, 2.38, 40.1, '2024-01-20 00:15:08'),
(188, 75, 2.51, 41.38, '2024-01-20 00:15:09'),
(190, 75, 2.56, 42.71, '2024-01-20 00:15:09'),
(192, 75, 2.62, 43.66, '2024-01-20 00:15:09'),
(194, 75, 2.68, 44.87, '2024-01-20 00:15:09'),
(196, 75, 2.81, 45.83, '2024-01-20 00:15:10'),
(198, 75, 2.84, 46.75, '2024-01-20 00:15:10'),
(200, 75, 2.84, 47.47, '2024-01-20 00:15:10'),
(202, 75, 2.96, 48.38, '2024-01-20 00:15:10'),
(204, 75, 2.98, 49.14, '2024-01-20 00:15:11'),
(206, 75, 2.98, 49.95, '2024-01-20 00:15:11'),
(208, 75, 2.99, 50.73, '2024-01-20 00:15:11'),
(210, 75, 3, 51.37, '2024-01-20 00:15:11'),
(212, 75, 3.04, 52.01, '2024-01-20 00:15:12'),
(214, 75, 3.17, 53.16, '2024-01-20 00:15:12'),
(216, 75, 3.3, 53.73, '2024-01-20 00:15:12'),
(218, 75, 3.34, 54.46, '2024-01-20 00:15:13'),
(220, 75, 3.28, 54.93, '2024-01-20 00:15:13'),
(222, 75, 3.33, 55.49, '2024-01-20 00:15:13'),
(224, 75, 3.31, 56.56, '2024-01-20 00:15:14'),
(226, 75, 3.36, 57, '2024-01-20 00:15:14'),
(228, 75, 3.4, 57.4, '2024-01-20 00:15:14'),
(230, 75, 3.45, 57.82, '2024-01-20 00:15:14'),
(232, 75, 3.49, 58.73, '2024-01-20 00:15:15'),
(234, 75, 3.56, 59.16, '2024-01-20 00:15:15'),
(236, 75, 3.57, 59.54, '2024-01-20 00:15:15'),
(237, 76, 0.07, 0, '2024-01-20 19:06:18'),
(238, 76, 0.71, 1.41, '2024-01-20 19:06:19'),
(239, 76, 1.02, 2.42, '2024-01-20 19:06:19'),
(240, 76, 1.41, 3, '2024-01-20 19:06:19'),
(241, 76, 1.58, 3.53, '2024-01-20 19:06:19'),
(242, 76, 1.78, 3.83, '2024-01-20 19:06:20'),
(243, 76, 1.87, 4.25, '2024-01-20 19:06:20'),
(244, 76, 1.97, 4.54, '2024-01-20 19:06:20'),
(245, 76, 2.21, 4.75, '2024-01-20 19:06:20'),
(246, 76, 2.32, 5, '2024-01-20 19:06:21'),
(247, 76, 2.33, 5.13, '2024-01-20 19:06:21'),
(248, 76, 2.45, 5.36, '2024-01-20 19:06:21'),
(249, 76, 2.57, 5.56, '2024-01-20 19:06:21'),
(250, 76, 2.49, 5.77, '2024-01-20 19:06:22'),
(251, 76, 2.63, 5.91, '2024-01-20 19:06:22'),
(252, 76, 2.64, 5.95, '2024-01-20 19:06:22'),
(253, 76, 2.69, 6.08, '2024-01-20 19:06:22'),
(254, 76, 2.72, 6.17, '2024-01-20 19:06:23'),
(255, 76, 2.76, 6.34, '2024-01-20 19:06:23'),
(256, 76, 2.89, 6.53, '2024-01-20 19:06:23'),
(257, 76, 2.98, 6.52, '2024-01-20 19:06:23'),
(258, 76, 3, 6.6, '2024-01-20 19:06:24'),
(259, 76, 3.12, 6.66, '2024-01-20 19:06:24'),
(260, 76, 3.05, 6.92, '2024-01-20 19:06:24'),
(261, 76, 3.1, 6.94, '2024-01-20 19:06:24'),
(262, 76, 3.21, 7.1, '2024-01-20 19:06:25'),
(263, 76, 3.19, 7.16, '2024-01-20 19:06:25'),
(264, 76, 3.29, 7.23, '2024-01-20 19:06:25'),
(265, 76, 3.24, 7.16, '2024-01-20 19:06:25');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;